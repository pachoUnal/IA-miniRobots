import numpy as np
import random
import matplotlib.pyplot as plt

# Datos
capacidad = np.array([3, 6, 5, 4])  # por planta
demanda = np.array([4, 3, 5, 3])    # por ciudad

transporte = np.array([
    [1, 4, 3, 6],
    [4, 1, 4, 5],
    [3, 4, 1, 4],
    [6, 5, 4, 1]
])

generacion = np.array([680, 720, 660, 750])  # por planta
total_generacion = generacion.reshape(-1, 1)  # para sumarlo con transporte

# AG parámetros
tam_poblacion = 100
generaciones = 200
prob_mutacion = 0.1

# Crear individuo válido
def crear_individuo():
    asignacion = np.zeros((4, 4), dtype=int)
    cap_rest = capacidad.copy()
    dem_rest = demanda.copy()

    for j in range(4):  # por ciudad
        while dem_rest[j] > 0:
            posibles = [i for i in range(4) if cap_rest[i] > 0]
            i = random.choice(posibles)
            envio = min(cap_rest[i], dem_rest[j], 1)
            asignacion[i][j] += envio
            cap_rest[i] -= envio
            dem_rest[j] -= envio
    return asignacion

# Evaluación de costo total
def evaluar(ind):
    return np.sum(ind * (transporte + total_generacion))

# Mutación: cambiar 1 unidad aleatoriamente entre celdas
def mutar(ind):
    nuevo = ind.copy()
    i1, j1 = random.randint(0, 3), random.randint(0, 3)
    if nuevo[i1][j1] > 0:
        i2 = random.choice([x for x in range(4) if x != i1])
        if capacidad[i2] - nuevo[i2].sum() > 0:
            nuevo[i1][j1] -= 1
            nuevo[i2][j1] += 1
    return reparar(nuevo)

# Reparar restricciones
def reparar(asig):
    asig = asig.copy()
    for i in range(4):
        exceso = asig[i].sum() - capacidad[i]
        while exceso > 0:
            j = np.argmax(asig[i])
            quitar = min(exceso, asig[i][j])
            asig[i][j] -= quitar
            exceso -= quitar

    for j in range(4):
        faltante = demanda[j] - asig[:, j].sum()
        while faltante > 0:
            i = np.argmin(asig[:, j])
            posible = min(faltante, capacidad[i] - asig[i].sum())
            if posible > 0:
                asig[i][j] += posible
                faltante -= posible
            else:
                break
    return asig

# AG principal
poblacion = [crear_individuo() for _ in range(tam_poblacion)]
mejores = []

for gen in range(generaciones):
    fitness = [evaluar(ind) for ind in poblacion]
    elite = poblacion[np.argmin(fitness)]
    mejores.append(min(fitness))
    nueva = [elite.copy()]  # elitismo

    while len(nueva) < tam_poblacion:
        padre = random.choice(poblacion)
        hijo = mutar(padre)
        nueva.append(hijo)

    poblacion = nueva

# Resultado final
mejor = min(poblacion, key=evaluar)
print("Despacho óptimo (GW de planta a ciudad):\n")
print(mejor)
print("\nCosto total mínimo:", evaluar(mejor))

# Gráfica
plt.plot(mejores)
plt.title("Evolución del costo total mínimo")
plt.xlabel("Generación")
plt.ylabel("Costo total")
plt.grid(True)
plt.show()
